#include "main.h"
#include "stm32g4xx_hal_i2c.h"
#include "stm32g4xx_hal_adc.h"
#include "stm32g4xx_hal_tim.h"
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <time.h>

UART_HandleTypeDef huart1;
I2C_HandleTypeDef hi2c1;
ADC_HandleTypeDef hadc1;
TIM_HandleTypeDef htim1;

#define LCD_ADDR (0x27 << 1)
#define HALL_U_PORT GPIOB
#define HALL_U_PIN GPIO_PIN_10
#define HALL_V_PORT GPIOB
#define HALL_V_PIN GPIO_PIN_11
#define HALL_W_PORT GPIOB
#define HALL_W_PIN GPIO_PIN_12
#define POLE_PAIRS 4
#define PULSES_PER_ELEC_REV 12
#define MOTOR_STOPPED_TIMEOUT 1000
#define RPM_AVERAGE_SIZE 32
#define DEBOUNCE_TIME_MS 1
#define POT_ADC_CHANNEL ADC_CHANNEL_1
#define PWM_TIMER &htim1
#define PWM_CHANNEL TIM_CHANNEL_1
#define PWM_PERIOD 4095
#define PWM_UPDATE_INTERVAL_MS 100
#define MAX_PWM_AT_2500_RPM 4012
#define DEADBAND_THRESHOLD_ADC 50
#define MPC_HORIZON 5
#define MPC_INPUT_DIM 1
#define MPC_STATE_DIM 1
#define TX_BUFFER_SIZE 100

volatile uint32_t hall_count = 0;
volatile uint32_t first_hall_time = 0;
volatile uint32_t current_hall_time = 0;
volatile uint32_t total_time_difference = 0;
volatile float rpm = 0.0f;
volatile uint32_t last_interrupt_time = 0;
volatile uint32_t pulse_counter = 0;
volatile float rpm_buffer[RPM_AVERAGE_SIZE];
volatile uint8_t rpm_buffer_index = 0;
volatile float filtered_rpm = 0.0f;
volatile uint32_t adc_value = 0;
static uint32_t previous_adc_value = 0;
static uint32_t current_pwm_duty_cycle = 0;
float mpc_Q[MPC_STATE_DIM][MPC_STATE_DIM] = {{1.0}};
float mpc_R[MPC_INPUT_DIM][MPC_INPUT_DIM] = {{0.1}};
float mpc_rpm_max = 2600.0f;
float mpc_pwm_max = MAX_PWM_AT_2500_RPM;
float predicted_rpm[MPC_HORIZON + 1];
float control_input[MPC_HORIZON];

float predict_motor_state(float current_rpm, float pwm_input) {
    return current_rpm + (float)pwm_input * 0.1f - current_rpm * 0.005f;
}

float calculate_cost(float rpm_target) {
    float total_cost = 0.0f;
    for (int i = 0; i < MPC_HORIZON; i++) {
        float error = predicted_rpm[i+1] - rpm_target;
        total_cost += mpc_Q[0][0] * error * error + mpc_R[0][0] * control_input[i] * control_input[i];
    }
    return total_cost;
}

void i2c_init() {
    hi2c1.Instance = I2C1;
    hi2c1.Init.Timing = 0x10909CEC;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.OwnAddress2Masks = I2C_OAR2_OA2NOMASK;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
    HAL_I2C_Init(&hi2c1);
    HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLED);
    HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
}

void hall_gpio_init() {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    __HAL_RCC_GPIOB_CLK_ENABLE();
    GPIO_InitStruct.Pin = HALL_U_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(HALL_U_PORT, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = HALL_V_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(HALL_V_PORT, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = HALL_W_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(HALL_W_PORT, &GPIO_InitStruct);
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void lcd_send_cmd(uint8_t cmd) {
    uint8_t data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
    data_l = ((cmd << 4) & 0xF0);
    data_t[0] = data_u | 0x0C;
    data_t[1] = data_u | 0x08;
    data_t[2] = data_l | 0x0C;
    data_t[3] = data_l | 0x08;
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, (uint8_t *)data_t, 4, 100);
}

void lcd_send_data(uint8_t data) {
    uint8_t data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xF0);
    data_l = ((data << 4) & 0xF0);
    data_t[0] = data_u | 0x0D;
    data_t[1] = data_u | 0x09;
    data_t[2] = data_l | 0x0D;
    data_t[3] = data_l | 0x09;
    HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, (uint8_t *)data_t, 4, 100);
}

void lcd_send_string(char *str) {
    while (*str) {
        lcd_send_data(*str++);
    }
}

void lcd_set_cursor(uint8_t row, uint8_t col) {
    uint8_t address;
    switch (row) {
        case 0: address = 0x80 + col; break;
        case 1: address = 0xC0 + col; break;
        default: address = 0x80; break;
    }
    lcd_send_cmd(address);
}

void lcd_init() {
    HAL_Delay(50);
    lcd_send_cmd(0x33);
    HAL_Delay(5);
    lcd_send_cmd(0x32);
    HAL_Delay(5);
    lcd_send_cmd(0x28);
    HAL_Delay(5);
    lcd_send_cmd(0x0C);
    HAL_Delay(5);
    lcd_send_cmd(0x06);
    HAL_Delay(5);
    lcd_send_cmd(0x01);
    HAL_Delay(5);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    static uint32_t last_interrupt_time_debounce[3] = {0, 0, 0};
    uint32_t current_time = HAL_GetTick();
    uint8_t pin_index = 0;
    if (GPIO_Pin == HALL_U_PIN) pin_index = 0;
    else if (GPIO_Pin == HALL_V_PIN) pin_index = 1;
    else if (GPIO_Pin == HALL_W_PIN) pin_index = 2;
    else return;
    if (current_time - last_interrupt_time_debounce[pin_index] > DEBOUNCE_TIME_MS) {
        current_hall_time = current_time;
        hall_count++;
        if (pulse_counter == 0) first_hall_time = current_hall_time;
        pulse_counter++;
        if (pulse_counter >= PULSES_PER_ELEC_REV) {
            total_time_difference = current_hall_time - first_hall_time;
            if (total_time_difference > 0) {
                float time_per_two_elec_rev_ms = (float)total_time_difference;
                float time_per_elec_rev_ms = time_per_two_elec_rev_ms / 2.0f;
                float electrical_frequency = 1000.0f / time_per_elec_rev_ms;
                rpm = (electrical_frequency * 60.0f) / (float)POLE_PAIRS;
                rpm_buffer[rpm_buffer_index] = rpm;
                rpm_buffer_index = (rpm_buffer_index + 1) % RPM_AVERAGE_SIZE;
            }
            pulse_counter = 0;
            first_hall_time = current_hall_time;
        }
        last_interrupt_time = current_time;
        last_interrupt_time_debounce[pin_index] = current_time;
    }
}

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
static void MX_USART1_UART_Init(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_I2C1_Init();
    MX_ADC1_Init();
    MX_TIM1_Init();
    MX_USART1_UART_Init();

    i2c_init();
    lcd_init();
    lcd_set_cursor(0, 0);
    lcd_send_string("Welcome");
    lcd_set_cursor(1, 0);
    lcd_send_string("Motor Start");
    HAL_Delay(2000);
    lcd_send_cmd(0x01);
    HAL_Delay(5);
    hall_gpio_init();
    HAL_ADC_Start(&hadc1);
    HAL_TIM_PWM_Start(PWM_TIMER, PWM_CHANNEL);

    while (1) {
        if (HAL_GetTick() - last_interrupt_time > MOTOR_STOPPED_TIMEOUT && last_interrupt_time != 0) {
            rpm = 0.0f;
            for (int i = 0; i < RPM_AVERAGE_SIZE; i++) rpm_buffer[i] = 0.0f;
            pulse_counter = 0;
            filtered_rpm = 0.0f;
        }

        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
            adc_value = HAL_ADC_GetValue(&hadc1);
            if (adc_value > 4095) adc_value = 4095;
        }

        uint32_t target_pwm_duty_cycle = 0;
        if (adc_value > DEADBAND_THRESHOLD_ADC) {
            target_pwm_duty_cycle = (uint32_t)(((uint32_t)(adc_value - DEADBAND_THRESHOLD_ADC) * MAX_PWM_AT_2500_RPM) / (4095 - DEADBAND_THRESHOLD_ADC));
            if (target_pwm_duty_cycle > MAX_PWM_AT_2500_RPM) target_pwm_duty_cycle = MAX_PWM_AT_2500_RPM;
        } else {
            target_pwm_duty_cycle = 0;
        }

        float current_rpm_mpc = filtered_rpm;
        float target_rpm_mpc = (float)target_pwm_duty_cycle * 2500.0f / MAX_PWM_AT_2500_RPM;
        predicted_rpm[0] = current_rpm_mpc;
        for (int i = 0; i < MPC_HORIZON; i++) {
            control_input[i] = (float)target_pwm_duty_cycle;
            predicted_rpm[i+1] = predict_motor_state(predicted_rpm[i], control_input[i]);
            if (predicted_rpm[i+1] > mpc_rpm_max) predicted_rpm[i+1] = mpc_rpm_max;
            if (control_input[i] > mpc_pwm_max) control_input[i] = mpc_pwm_max;
            if (control_input[i] < 0) control_input[i] = 0;
        }
        float cost = calculate_cost(target_rpm_mpc);
        (void)cost;
        uint32_t optimal_pwm = target_pwm_duty_cycle;
        (void)optimal_pwm;

        if (target_pwm_duty_cycle > current_pwm_duty_cycle) {
            float angle_rad = 10.0f * M_PI / 180.0f;
            float slope = tanf(angle_rad);
            uint32_t delta_pwm = round(slope * PWM_UPDATE_INTERVAL_MS);
            if (target_pwm_duty_cycle > current_pwm_duty_cycle + delta_pwm) current_pwm_duty_cycle += delta_pwm;
            else current_pwm_duty_cycle = target_pwm_duty_cycle;
        } else if (target_pwm_duty_cycle < current_pwm_duty_cycle) {
            current_pwm_duty_cycle = target_pwm_duty_cycle;
        }
        __HAL_TIM_SET_COMPARE(PWM_TIMER, PWM_CHANNEL, current_pwm_duty_cycle);

        float average_rpm = 0.0f;
        for (int i = 0; i < RPM_AVERAGE_SIZE; i++) average_rpm += rpm_buffer[i];
        average_rpm /= RPM_AVERAGE_SIZE;
        float alpha = 0.2f;
        filtered_rpm = alpha * average_rpm + (1.0f - alpha) * filtered_rpm;

        char rpm_str_line1[20];
        sprintf(rpm_str_line1, "RPM:%.0f", filtered_rpm);
        lcd_set_cursor(0, 0);
        lcd_send_string("                    ");
        lcd_set_cursor(0, 0);
        lcd_send_string(rpm_str_line1);
        int dot_position = round((filtered_rpm / 2500.0) * 15);
        if (dot_position < 0) dot_position = 0;
        if (dot_position > 15) dot_position = 15;
        char rpm_progress_line[17];
        for (int i = 0; i < 16; i++) rpm_progress_line[i] = ' ';
        rpm_progress_line[dot_position] = '.';
        rpm_progress_line[16] = '\0';
        lcd_set_cursor(1, 0);
        lcd_send_string(rpm_progress_line);

        char tx_buffer[TX_BUFFER_SIZE];
        float voltage = (float)current_pwm_duty_cycle * 24.0f / 4095.0f;
        uint8_t hall_u_state = HAL_GPIO_ReadPin(HALL_U_PORT, HALL_U_PIN);
        uint8_t hall_v_state = HAL_GPIO_ReadPin(HALL_V_PORT, HALL_V_PIN);
        uint8_t hall_w_state = HAL_GPIO_ReadPin(HALL_W_PORT, HALL_W_PIN);

        // Modify the PWM duty cycle transmission to be between 0.0 and 1.0
        float normalized_pwm = (float)current_pwm_duty_cycle / PWM_PERIOD;

        snprintf(tx_buffer, TX_BUFFER_SIZE, "%.0f,%.2f,%u,%u,%u,%.2f,0.0\r\n",
                 filtered_rpm, normalized_pwm, hall_u_state, hall_v_state, hall_w_state, voltage);
        HAL_UART_Transmit(&huart1, (uint8_t*)tx_buffer, strlen(tx_buffer), 10);
        HAL_Delay(100); // Reduced delay for faster data transmission
        previous_adc_value = adc_value;
    }
}

void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 1;
    RCC_OscInitStruct.PLL.PLLN = 10;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
}

static void MX_ADC1_Init(void) {
    ADC_ChannelConfTypeDef sConfig = {0};
    hadc1.Instance = ADC1;
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
    hadc1.Init.ContinuousConvMode = ENABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    hadc1.Init.LowPowerAutoWait = DISABLE;
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
    HAL_ADC_Init(&hadc1);
    sConfig.Channel = POT_ADC_CHANNEL;
    sConfig.Rank = ADC_REGULAR_RANK_1;
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
    sConfig.Offset = 0;
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
}

static void MX_I2C1_Init(void) {
    hi2c1.Instance = I2C1;
    hi2c1.Init.Timing = 0x10909CEC;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.OwnAddress2Masks = I2C_OAR2_OA2NOMASK;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
    HAL_I2C_Init(&hi2c1);
    HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLED);
    HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
}

static void MX_TIM1_Init(void) {
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig = {0};
    TIM_OC_InitTypeDef sConfigOC = {0};
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
    htim1.Instance = TIM1;
    htim1.Init.Prescaler = 1;
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim1.Init.Period = PWM_PERIOD;
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim1.Init.RepetitionCounter = 0;
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
    HAL_TIM_Base_Init(&htim1);
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
    HAL_TIM_PWM_Init(&htim1);
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
    sConfigOC.Pulse = 0;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
    sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
    sBreakDeadTimeConfig.DeadTime = 0;
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
    HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
    HAL_TIM_MspPostInit(&htim1);
}

static void MX_USART1_UART_Init(void) {
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
    HAL_UART_Init(&huart1);
    HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
    HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
    HAL_UARTEx_DisableFifoMode(&huart1);
}

static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = HALL_U_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(HALL_U_PORT, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = HALL_V_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(HALL_V_PORT, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = HALL_W_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(HALL_W_PORT, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void Error_Handler(void) {
    __disable_irq();
    while (1) {}
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line) {}
#endif
